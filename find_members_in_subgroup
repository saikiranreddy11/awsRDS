import requests
import csv

# GitLab API settings
GITLAB_API_URL = "https://gitlab.com/api/v4"
PRIVATE_TOKEN = "YOUR_ACCESS_TOKEN"  # Replace with your GitLab private token
GROUP_ID = "YOUR_GROUP_ID"  # Replace with the group ID for which you want to fetch members

# Headers for the GitLab API
headers = {
    "PRIVATE-TOKEN": PRIVATE_TOKEN
}

def get_group_members(group_id, members=[]):
    """Fetch all members of a group including subgroups, and return a list of members with their access levels."""
    page = 1
    per_page = 100
    while True:
        url = f"{GITLAB_API_URL}/groups/{group_id}/members/all?per_page={per_page}&page={page}"
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            print(f"Error fetching group members: {response.status_code}")
            break

        data = response.json()
        if not data:
            break

        for member in data:
            members.append({
                "name": member.get("name"),
                "username": member.get("username"),
                "group_id": group_id,
                "access_level": member.get("access_level")
            })

        page += 1

    return members

def get_subgroup_projects(group_id):
    """Fetch all subgroups and projects within the group recursively."""
    projects = []
    subgroups = []
    # Fetch subgroups
    url = f"{GITLAB_API_URL}/groups/{group_id}/subgroups"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        subgroups = response.json()

    # Fetch projects
    url = f"{GITLAB_API_URL}/groups/{group_id}/projects"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        projects = response.json()

    return subgroups, projects

def export_to_csv(members, filename="gitlab_members.csv"):
    """Export the list of members to a CSV file."""
    with open(filename, mode="w", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=["name", "username", "group_id", "access_level"])
        writer.writeheader()
        for member in members:
            writer.writerow(member)

def main():
    all_members = []

    # Get members for the main group
    print(f"Fetching members for group ID: {GROUP_ID}")
    all_members = get_group_members(GROUP_ID)

    # Get subgroups and projects recursively
    subgroups, projects = get_subgroup_projects(GROUP_ID)

    # Fetch members for subgroups
    for subgroup in subgroups:
        print(f"Fetching members for subgroup: {subgroup['name']} (ID: {subgroup['id']})")
        all_members += get_group_members(subgroup["id"])

    # Fetch members for each project
    for project in projects:
        print(f"Fetching members for project: {project['name']} (ID: {project['id']})")
        url = f"{GITLAB_API_URL}/projects/{project['id']}/members"
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            project_members = response.json()
            for member in project_members:
                all_members.append({
                    "name": member.get("name"),
                    "username": member.get("username"),
                    "group_id": project['id'],
                    "access_level": member.get("access_level")
                })

    # Export all members to CSV
    print("Exporting members to CSV...")
    export_to_csv(all_members)

if __name__ == "__main__":
    main()











#!/bin/bash

# Replace with your actual subgroup ID and access token
parent_group_id=<your_parent_subgroup_id>  # Replace with your parent group ID
private_token=<your_access_token>  # Replace with your actual access token

# Output file
output_file="members_access_report.csv"
echo "Member Name, Username, Path, Access Level" > $output_file

# A function to get all members of a subgroup or project and append them to a global list
declare -A member_access_map

get_members() {
  local entity_type=$1
  local entity_id=$2
  local entity_path=$3

  # Get members for the current entity (subgroup or project)
  local page=1
  local per_page=100
  while true; do
    response=$(curl --silent --header "PRIVATE-TOKEN: $private_token" "https://gitlab.com/api/v4/$entity_type/$entity_id/members?per_page=$per_page&page=$page")
    
    # Break if the response is empty
    if [[ $(echo "$response" | jq '. | length') -eq 0 ]]; then
      break
    fi

    # Process each member in the response
    echo "$response" | jq -r '.[] | "\(.name), \(.username), '$entity_path', \(.access_level)"' >> $output_file
    
    # Store the access path and access level in a map (for unique members later)
    while IFS=, read -r name username path access_level; do
      key="$username"
      value="$path $access_level"
      member_access_map[$key]+="$value\n"
    done <<< "$(echo "$response" | jq -r '.[] | "\(.name), \(.username), '$entity_path', \(.access_level)"')"

    ((page++))
  done
}

# Recursive function to get all subgroups and projects in a group
get_subgroups_and_projects() {
  local group_id=$1
  local group_path=$2

  # Get all subgroups of this group
  subgroups=$(curl --silent --header "PRIVATE-TOKEN: $private_token" "https://gitlab.com/api/v4/groups/$group_id/subgroups?per_page=100")
  echo "$subgroups" | jq -r '.[] | "\(.id) \(.full_path)"' | while read subgroup_id subgroup_path; do
    echo "Processing subgroup: $subgroup_path"
    get_members "groups" "$subgroup_id" "$subgroup_path"
    get_subgroups_and_projects "$subgroup_id" "$subgroup_path"  # Recursively get all subgroups
  done

  # Get all projects of this group
  projects=$(curl --silent --header "PRIVATE-TOKEN: $private_token" "https://gitlab.com/api/v4/groups/$group_id/projects?per_page=100")
  echo "$projects" | jq -r '.[] | "\(.id) \(.path_with_namespace)"' | while read project_id project_path; do
    echo "Processing project: $project_path"
    get_members "projects" "$project_id" "$project_path"
  done
}

# Start by processing the parent group and its members
get_members "groups" "$parent_group_id" "parent_group"

# Then process all subgroups and projects recursively
get_subgroups_and_projects "$parent_group_id" "parent_group"

# Optionally, print unique members and their access across subgroups/projects
echo "Unique members and their access paths:"
for username in "${!member_access_map[@]}"; do
  echo -e "Member: $username\nAccess:\n${member_access_map[$username]}"
done

echo "Access report has been saved to $output_file"



