import requests
import csv

# Replace with your GitLab token and parent group ID
PRIVATE_TOKEN = 'your_private_token'
PARENT_GROUP_ID = 'your_parent_group_id'
GITLAB_URL = 'https://gitlab.com/api/v4'

# Headers for API requests
headers = {'PRIVATE-TOKEN': PRIVATE_TOKEN}

# Mapping access levels to descriptive names
access_level_map = {
    0: 'No access',
    5: 'Minimal access',
    10: 'Guest',
    20: 'Reporter',
    30: 'Developer',
    40: 'Maintainer',
    50: 'Owner'
}

# Function to recursively get all subgroups/projects and their members
def get_all_projects_and_subgroups(group_id):
    projects_and_subgroups = []
    
    # Fetch projects in the group
    page = 1
    per_page = 100
    
    while True:
        response = requests.get(f'{GITLAB_URL}/groups/{group_id}/projects', headers=headers, params={'per_page': per_page, 'page': page})
        if response.status_code == 200:
            projects = response.json()
            if not projects:
                break
            for project in projects:
                projects_and_subgroups.append({
                    'id': project['id'],
                    'name': project['name'],
                    'path_with_namespace': project['path_with_namespace'],
                    'type': 'project'
                })
            page += 1
        else:
            print(f"Error fetching projects for group ID: {group_id}, Status Code: {response.status_code}")
            break

    # Fetch subgroups in the group
    page = 1
    while True:
        response = requests.get(f'{GITLAB_URL}/groups/{group_id}/subgroups', headers=headers, params={'per_page': per_page, 'page': page})
        if response.status_code == 200:
            subgroups = response.json()
            if not subgroups:
                break
            for subgroup in subgroups:
                projects_and_subgroups.append({
                    'id': subgroup['id'],
                    'name': subgroup['name'],
                    'path_with_namespace': subgroup['full_path'],
                    'type': 'subgroup'
                })
                # Recursively fetch projects and subgroups for each subgroup
                projects_and_subgroups.extend(get_all_projects_and_subgroups(subgroup['id']))
            page += 1
        else:
            print(f"Error fetching subgroups for group ID: {group_id}, Status Code: {response.status_code}")
            break

    return projects_and_subgroups

# Function to get all unique members for a given project or subgroup
def get_members(resource_id, resource_type):
    members = []
    resource_url = f'{GITLAB_URL}/{resource_type}/{resource_id}/members/all'
    response = requests.get(resource_url, headers=headers)
    
    if response.status_code == 200:
        for member in response.json():
            members.append({
                'name': member['name'],
                'username': member['username'],
                'access_level': access_level_map.get(member['access_level'], 'Unknown'),
                'resource_type': resource_type,
                'resource_name': resource_id
            })
    else:
        print(f"Error fetching members for {resource_type} ID: {resource_id}, Status Code: {response.status_code}")

    return members

# Function to write the results to a CSV
def write_to_csv(data, filename):
    with open(filename, 'w', newline='') as csvfile:
        fieldnames = ['Member Name', 'Username', 'Access Level', 'Resource Path', 'Resource Type']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for row in data:
            writer.writerow(row)

# Main function
def main():
    print("Fetching all projects and subgroups recursively...")
    resources = get_all_projects_and_subgroups(PARENT_GROUP_ID)

    all_members = []
    unique_members = {}

    # Fetch members for each project and subgroup
    for resource in resources:
        resource_type = 'groups' if resource['type'] == 'subgroup' else 'projects'
        members = get_members(resource['id'], resource_type)

        # Add to unique members dictionary and list all resource access
        for member in members:
            if member['username'] not in unique_members:
                unique_members[member['username']] = {
                    'name': member['name'],
                    'username': member['username'],
                    'resources': []
                }
            unique_members[member['username']]['resources'].append({
                'access_level': member['access_level'],
                'path_with_namespace': resource['path_with_namespace'],
                'type': resource['type']
            })

            all_members.append({
                'Member Name': member['name'],
                'Username': member['username'],
                'Access Level': member['access_level'],
                'Resource Path': resource['path_with_namespace'],
                'Resource Type': resource['type']
            })

    print(f"Found {len(unique_members)} unique members.")

    # Write all member access details to CSV
    write_to_csv(all_members, 'member_access_report.csv')

    # Write all unique members to a CSV
    with open('unique_members.csv', 'w', newline='') as csvfile:
        fieldnames = ['Member Name', 'Username']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for username, member_data in unique_members.items():
            writer.writerow({
                'Member Name': member_data['name'],
                'Username': member_data['username']
            })

    print("Data written to 'member_access_report.csv' and 'unique_members.csv'")

if __name__ == '__main__':
    main()
