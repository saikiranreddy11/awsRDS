import requests
import csv

# Function to get all subgroups and projects recursively
def get_subgroups_and_projects(group_id, token):
    headers = {'PRIVATE-TOKEN': token}
    subgroups_url = f'https://gitlab.com/api/v4/groups/{group_id}/subgroups?per_page=100&all_available=true'
    projects_url = f'https://gitlab.com/api/v4/groups/{group_id}/projects?per_page=100&all_available=true'
    
    subgroups = requests.get(subgroups_url, headers=headers).json()
    projects = requests.get(projects_url, headers=headers).json()

    resources = []
    # Add subgroups to resources
    for subgroup in subgroups:
        resources.append({
            'type': 'subgroup',
            'id': subgroup['id'],
            'name': subgroup['name'],
            'path': subgroup['full_path']
        })
        # Recursively fetch subgroups and projects inside this subgroup
        resources += get_subgroups_and_projects(subgroup['id'], token)
    
    # Add projects to resources
    for project in projects:
        resources.append({
            'type': 'project',
            'id': project['id'],
            'name': project['name'],
            'path': project['path_with_namespace']
        })
    
    return resources

# Function to get all members of a resource
def get_members(resource_id, resource_type, token):
    headers = {'PRIVATE-TOKEN': token}
    members_url = f'https://gitlab.com/api/v4/{resource_type}/{resource_id}/members/all?per_page=100'
    members = requests.get(members_url, headers=headers).json()
    return members

# Map numeric access levels to descriptive strings
access_levels = {
    0: "No access",
    5: "Minimal access",
    10: "Guest",
    20: "Reporter",
    30: "Developer",
    40: "Maintainer",
    50: "Owner"
}

# Write results to CSV
def write_to_csv(members_data, unique_members):
    with open('member_access.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Member Name", "Username", "Resource Name", "Resource Path", "Access Level"])
        for row in members_data:
            writer.writerow(row)

    with open('unique_members.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Member Name", "Username"])
        for member in unique_members:
            writer.writerow([member['name'], member['username']])

def main():
    group_id = '<your_group_id>'  # Replace with your actual group ID
    token = '<your_access_token>'  # Replace with your GitLab personal access token

    # Step 1: Fetch all subgroups and projects
    print("Fetching all subgroups and projects recursively...")
    resources = get_subgroups_and_projects(group_id, token)

    members_data = []
    unique_members = {}

    # Step 2: Fetch members of each resource
    print("Fetching members for each resource...")
    for resource in resources:
        resource_type = 'groups' if resource['type'] == 'subgroup' else 'projects'
        members = get_members(resource['id'], resource_type, token)

        for member in members:
            member_key = (member['name'], member['username'])
            # Avoid duplicates in unique members
            if member_key not in unique_members:
                unique_members[member_key] = {
                    'name': member['name'],
                    'username': member['username']
                }
            # Add member's access level and resource path to the CSV data
            members_data.append([
                member['name'],
                member['username'],
                resource['name'],
                resource['path'],
                access_levels.get(member['access_level'], 'Unknown')
            ])

    # Step 3: Write results to CSV
    print(f"Found {len(unique_members)} unique members.")
    write_to_csv(members_data, unique_members)

if __name__ == "__main__":
    main()
