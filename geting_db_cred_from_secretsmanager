#!/bin/bash

# Variables
ROLE_ARN="arn:aws:iam::orb-account-id:role/role-to-assume"
SECRET_ID="test/orbc_srvc"
REGION="your-region"
DB_ENDPOINT="your-db-endpoint"
DB_USERNAME="db-username"
SESSION_NAME="developer-session"

# Shared IAM user credentials
AWS_ACCESS_KEY_ID="shared-access-key-id"
AWS_SECRET_ACCESS_KEY="shared-secret-access-key"

# Assume the role and get temporary credentials
TEMP_CREDENTIALS=$(AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY aws sts assume-role --role-arn "$ROLE_ARN" --role-session-name "$SESSION_NAME" --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)

# Extract the credentials
ACCESS_KEY_ID=$(echo $TEMP_CREDENTIALS | awk '{print $1}')
SECRET_ACCESS_KEY=$(echo $TEMP_CREDENTIALS | awk '{print $2}')
SESSION_TOKEN=$(echo $TEMP_CREDENTIALS | awk '{print $3}')

# Export the credentials to environment variables
export AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY
export AWS_SESSION_TOKEN=$SESSION_TOKEN

# Fetch the database password from Secrets Manager
DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id "$SECRET_ID" --region "$REGION" | jq -r .SecretString | jq -r .password)

# Check if the password was fetched successfully
if [ -z "$DB_PASSWORD" ]; then
  echo "Failed to fetch the database password from Secrets Manager."
  exit 1
fi

# Echo the database details to the console
echo "Database Endpoint: $DB_ENDPOINT"
echo "Database Username: $DB_USERNAME"
echo "Database Password: $DB_PASSWORD"
