import boto3
import psycopg2
import os
import json
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

secrets_manager = boto3.client('secretsmanager')

def lambda_handler(event, context):
    secret_arn = event['SecretId']
    step = event['Step']

    # Get the secret details
    metadata = secrets_manager.describe_secret(SecretId=secret_arn)

    # Perform the step
    if step == "createSecret":
        create_secret(secret_arn, context)
    elif step == "setSecret":
        set_secret(secret_arn)
    elif step == "testSecret":
        test_secret(secret_arn)
    elif step == "finishSecret":
        finish_secret(secret_arn)
    else:
        raise ValueError("Invalid step parameter")

def create_secret(secret_arn, context):
    # Generate a new password
    new_password = secrets_manager.get_random_password(PasswordLength=16, ExcludeCharacters='"/@')

    # Get the current secret
    current_secret = json.loads(secrets_manager.get_secret_value(SecretId=secret_arn)['SecretString'])

    # Create a new secret JSON
    new_secret = {
        'username': current_secret['username'],
        'password': new_password['RandomPassword'],
        'engine': current_secret['engine'],
        'host': current_secret['host'],
        'dbname': current_secret['dbname'],
        'port': current_secret['port']
    }

    # Store the new secret
    secrets_manager.put_secret_value(
        SecretId=secret_arn,
        ClientRequestToken=context.aws_request_id,
        SecretString=json.dumps(new_secret),
        VersionStages=['AWSPENDING']
    )

def set_secret(secret_arn):
    # Get the pending secret version
    pending_secret = json.loads(secrets_manager.get_secret_value(SecretId=secret_arn, VersionStage="AWSPENDING")['SecretString'])

    # Update the database with the new password
    update_password(pending_secret)

def test_secret(secret_arn):
    # Get the pending secret version
    pending_secret = json.loads(secrets_manager.get_secret_value(SecretId=secret_arn, VersionStage="AWSPENDING")['SecretString'])

    # Test the new password
    test_connection(pending_secret)

def finish_secret(secret_arn):
    # Mark the new secret as the current secret
    secrets_manager.update_secret_version_stage(
        SecretId=secret_arn,
        VersionStage='AWSCURRENT',
        MoveToVersionId=context.aws_request_id,
        RemoveFromVersionId='AWSPENDING'
    )

def update_password(secret):
    connection = psycopg2.connect(
        host=secret['host'],
        user=secret['username'],
        password=secret['password'],
        dbname=secret['dbname'],
        port=secret['port']
    )
    
    try:
        with connection.cursor() as cursor:
            cursor.execute(f"ALTER USER {secret['username']} WITH PASSWORD '{secret['password']}';")
        connection.commit()
    finally:
        connection.close()

def test_connection(secret):
    connection = psycopg2.connect(
        host=secret['host'],
        user=secret['username'],
        password=secret['password'],
        dbname=secret['dbname'],
        port=secret['port']
    )
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1;")
    finally:
        connection.close()
