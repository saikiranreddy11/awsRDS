import json
import boto3
import pgdb  # Make sure PyGreSQL is available in your Lambda environment

def lambda_handler(event, context):
    arn = event["SecretId"]
    token = event["ClientRequestToken"]
    step = event["Step"]
    
    client = boto3.client("secretsmanager")
    
    metadata = client.describe_secret(SecretId=arn)

    if not metadata["RotationEnabled"]:
        raise ValueError(f"Secret {arn} is not enabled for rotation")
        
    print(f"step: {step}")
    
    if step == "createSecret":
        createSecret(client, arn, token)
    
    elif step == "setSecret":
        setSecret(client, arn, token)
        
    elif step == "testSecret":
        testSecret(client, arn, token)
        
    elif step == "finishSecret":
        finishSecret(client, arn, token)
        
    else:
        raise ValueError("Invalid step parameter")

def createSecret(client, arn, token):
    client.get_secret_value(SecretId=arn, VersionStage="AWSCURRENT")
    
    try:
        client.get_secret_value(SecretId=arn, VersionId=token, VersionStage="AWSPENDING")
    except client.exceptions.ResourceNotFoundException:
        password = client.get_random_password(ExcludeCharacters='/@"\'\\')
        current_secret = json.loads(client.get_secret_value(SecretId=arn, VersionStage="AWSCURRENT")["SecretString"])
        current_secret["password"] = password["RandomPassword"]
        client.put_secret_value(SecretId=arn, ClientRequestToken=token, SecretString=json.dumps(current_secret), VersionStages=["AWSPENDING"])

def setSecret(client, arn, token):
    pending_secret = json.loads(client.get_secret_value(SecretId=arn, VersionStage="AWSPENDING", VersionId=token)["SecretString"])
    host = pending_secret["host"]
    username = pending_secret["username"]
    password = pending_secret["password"]
    dbname = pending_secret.get("dbname", "postgres")
    port = int(pending_secret.get("port", 5432))
    
    # Update the database with the new password
    conn = pgdb.connect(host=host, user=username, password=pending_secret["old_password"], database=dbname, port=port)
    try:
        with conn.cursor() as cur:
            cur.execute(f"ALTER USER {username} WITH PASSWORD '{password}';")
            conn.commit()
    finally:
        conn.close()
    
def testSecret(client, arn, token):
    pending_secret = json.loads(client.get_secret_value(SecretId=arn, VersionStage="AWSPENDING", VersionId=token)["SecretString"])
    host = pending_secret["host"]
    username = pending_secret["username"]
    password = pending_secret["password"]
    dbname = pending_secret.get("dbname", "postgres")
    port = int(pending_secret.get("port", 5432))
    
    # Try to connect to the database with the new credentials
    try:
        conn = pgdb.connect(host=host, user=username, password=password, database=dbname, port=port)
        conn.close()
    except pgdb.Error as e:
        raise ValueError("Unable to log into database with pending secret of secret ARN %s" % arn) from e

def finishSecret(client, arn, token):
    metadata = client.describe_secret(SecretId=arn)
    
    for version in metadata["VersionIdsToStages"]:
        if "AWSCURRENT" in metadata["VersionIdsToStages"][version]:
            if version == token:
                return
            
            client.update_secret_version_stage(SecretId=arn, VersionStage="AWSCURRENT", MoveToVersionId=token, RemoveFromVersionId=version)
            break
