variable "environment" {
  description = "The environment to deploy to (e.g., dev, prod)"
  type        = string
}

variable "users" {
  description = "List of users for whom to create secrets"
  type = list(object({
    username = string
    password = string
    host     = string
    dbname   = string
    port     = number
    masterarn = string
  }))
}







environment = "dev"

users = [
  {
    username = "user1"
    password = "password1"
    host     = "dev-db-instance1.cluster-abcdefghij.us-east-1.rds.amazonaws.com"
    dbname   = "devdb1"
    port     = 5432
    masterarn = "arn:aws:secretsmanager:us-east-1:123456789012:secret:dev_master_secret1"
  },
  {
    username = "user2"
    password = "password2"
    host     = "dev-db-instance2.cluster-abcdefghij.us-east-1.rds.amazonaws.com"
    dbname   = "devdb2"
    port     = 5432
    masterarn = "arn:aws:secretsmanager:us-east-1:123456789012:secret:dev_master_secret2"
  }
]





provider "aws" {
  region = "us-east-1"  # Specify your region
}

resource "aws_iam_role" "lambda_exec_role" {
  name = "lambda_exec_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_exec_policy_attach" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_iam_role_policy" "lambda_policy" {
  name = "lambda_policy"
  role = aws_iam_role.lambda_exec_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue",
          "secretsmanager:UpdateSecretVersionStage"
        ],
        Effect   = "Allow",
        Resource = "*"
      },
      {
        Action = [
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters",
          "rds:ModifyDBInstance",
          "rds:ModifyDBCluster"
        ],
        Effect   = "Allow",
        Resource = "*"
      }
    ]
  })
}

resource "aws_lambda_function" "secret_rotation_lambda" {
  filename         = "lambda_function.zip"  # Adjusted path to the zip file
  function_name    = "aurora_postgres_secret_rotation_${var.environment}"
  role             = aws_iam_role.lambda_exec_role.arn
  handler          = "lambda_function.lambda_handler"
  source_code_hash = filebase64sha256("lambda_function.zip")
  runtime          = "python3.8"

  environment {
    variables = {
      SECRETS_MANAGER_ENDPOINT = "secretsmanager.${var.region}.amazonaws.com"
    }
  }
}

locals {
  secret_suffix = "${var.environment}_aurora_postgres_db_user_secret"
}

module "aurora_postgres_secrets" {
  source = "lgallard/secrets-manager/aws"

  for_each = { for user in var.users : user.username => user }

  secret_name        = "${each.value.username}_${local.secret_suffix}"
  description        = "Secret for Aurora PostgreSQL DB user ${each.value.username} in ${var.environment} environment"
  secret_string      = jsonencode({
    username = each.value.username
    password = each.value.password
    engine   = "postgres"
    host     = each.value.host
    dbname   = each.value.dbname
    port     = each.value.port
    masterarn = each.value.masterarn
  })
  enable_rotation    = true
  rotation_lambda_arn = aws_lambda_function.secret_rotation_lambda.arn
}




