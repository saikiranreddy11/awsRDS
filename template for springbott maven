name: Deploy to ECS

on:
  push:
    branches:
      - main  # Change this to your branch

jobs:
  deploy-to-ecs-prd:
    needs: scan-ecr-image-prd
    runs-on: arc-rs-nonprod
    strategy:
      matrix:
        service:
          - prism-service
          - redis
          - event-horizon
          - queue-worker-1
          - queue-worker-2

    steps:
      - name: Checkout Terraform Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.IAM_ROLE_PRD }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Capture Old Task Definition
        id: get-old-task-def
        run: |
          OLD_TASK_DEF=$(aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ matrix.service }} --query "services[0].taskDefinition" --output text)
          echo "OLD_TASK_DEF=$OLD_TASK_DEF" >> $GITHUB_ENV

      - name: Export Image Tag for Terraform
        run: echo "TF_VAR_ecr_image_tag=${{ IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Run Terraform Plan
        id: terraform-plan
        run: |
          cd ecs-fargate/${{ matrix.service }}
          terraform init -reconfigure -backend-config=tfbackends/terraform-prd.tfbackend
          terraform validate
          terraform plan -var-file=tfvars/terraform-prd.tfvars -out=tfplan > plan_output.txt
          cat plan_output.txt  # Print the Terraform plan output
          
          # Check if infra changes exist
          if grep -q "No changes. Your infrastructure matches the configuration." plan_output.txt; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            echo "NO_CHANGES=false" >> $GITHUB_ENV
          fi

      # ðŸ›  Always Update Task Definition (Even if Infra Does Not Change)
      - name: Update Task Definition with New Image
        run: |
          echo "Updating ECS service with new image: ${{ IMAGE_TAG }}"
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service ${{ matrix.service }} --force-new-deployment

      - name: Apply Terraform Changes (If Needed)
        if: env.NO_CHANGES == 'false'
        run: |
          cd ecs-fargate/${{ matrix.service }}
          terraform apply tfplan -auto-approve

      - name: Wait for ECS Deployment
        id: wait-for-deployment
        run: |
          CLUSTER_NAME=${{ env.CLUSTER_NAME }}
          SERVICE_NAME="${{ matrix.service }}"
          MAX_WAIT_TIME=900  # 15 minutes timeout
          TIME_ELAPSED=0

          while true; do
            STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].deployments[0].rolloutState" --output text)
            echo "Current rollout state: $STATUS"

            if [[ "$STATUS" == "COMPLETED" ]]; then
              echo "Deployment (or rollback) completed successfully."
              break
            fi

            if [[ "$STATUS" == "IN_PROGRESS" ]]; then
              echo "Deployment still in progress..."
            fi

            if [[ "$TIME_ELAPSED" -ge "$MAX_WAIT_TIME" ]]; then
              echo "Deployment taking too long! Marking as failed."
              exit 1
            fi

            sleep 15
            TIME_ELAPSED=$((TIME_ELAPSED + 15))
          done

      - name: Validate Deployment Task Definition (If Terraform Made Changes)
        run: |
          NEW_TASK_DEF=$(aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ matrix.service }} --query "services[0].taskDefinition" --output text)

          echo "Old Task Definition: $OLD_TASK_DEF"
          echo "New Task Definition: $NEW_TASK_DEF"

          if [[ "$NEW_TASK_DEF" == "$OLD_TASK_DEF" ]]; then
            echo "ðŸš¨ Deployment failed and was rolled back!"
            exit 1
          else
            echo "âœ… Deployment successful with new task definition."
          fi

      - name: Deregister Failed Task Definition (If Rollback Detected)
        if: failure()
        run: |
          echo "Rolling back: Deregistering failed task definition..."
          aws ecs deregister-task-definition --task-definition $NEW_TASK_DEF
