name: Build, Push, and Deploy Prism Application

on:
  push:
    branches:
      - main
      - production

permissions:
  contents: read
  id-token: write
  packages: write
  actions: read
  security-events: write

env:
  IMAGE_TAG: git-${{ github.sha }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - frontend
          - backend
          - server
          - queue-worker
          - event-horizon
          - event-horizon-nginx
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.IAM_ROLE_PROD }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image for ${{ matrix.service }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars[format('ECR_REPO_PRISM_{0}_PRD', matrix.service)] }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "Pushing image for service: ${{ matrix.service }}"
          docker build --build-arg AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID_PRD }} \
            --file ./Dockerfile.production -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ecs:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - prism-service
          - redis
          - event-horizon
          - queue-worker1
          - queue-worker2
    steps:
      - name: Checkout Terraform Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.IAM_ROLE_PROD }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Export Image Tag for Terraform
        run: echo "TF_VAR_image_tag=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: terraform init
        working-directory: ecs-fargate/${{ matrix.service }}

      - name: Plan Terraform
        run: terraform plan
        working-directory: ecs-fargate/${{ matrix.service }}

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: ecs-fargate/${{ matrix.service }}
