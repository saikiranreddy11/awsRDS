- name: Re-register Last Successful Task Definition
  if: failure() && env.rollback_status == 'COMPLETED'
  run: |
    CLUSTER_NAME="dgx-prism-use1-prd-ecs"
    SERVICE_NAME="${{ matrix.service }}"
    
    echo "üîÑ Detecting rollback and restoring previous task definition..."

    # Get the last known inactive task definition ARN
    LAST_TASK_DEF_ARN=$(aws ecs list-task-definitions --status INACTIVE --sort DESC \
      --family-prefix ${SERVICE_NAME}-taskdef --query "taskDefinitionArns[0]" --output text)

    if [ "$LAST_TASK_DEF_ARN" == "None" ]; then
      echo "‚ö†Ô∏è No previous inactive task definition found, skipping recovery!"
      exit 1
    fi

    # Fetch the last successful task definition JSON, remove unnecessary attributes
    aws ecs describe-task-definition --task-definition $LAST_TASK_DEF_ARN --query "taskDefinition" > taskdef.json

    cat taskdef.json | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, 
      .compatibilities, .registeredBy, .registeredAt, .deregisteredBy, .deregisteredAt)' > new-taskdef.json

    # Register the cleaned-up task definition
    aws ecs register-task-definition --cli-input-json file://new-taskdef.json

    # Fetch the newly registered active task definition ARN
    NEW_TASK_DEF_ARN=$(aws ecs list-task-definitions --status ACTIVE --sort DESC \
      --family-prefix ${SERVICE_NAME}-taskdef --query "taskDefinitionArns[0]" --output text)

    if [ "$NEW_TASK_DEF_ARN" == "None" ]; then
      echo "‚ùå Failed to re-register the task definition!"
      exit 1
    fi

    # Update ECS service to use the restored task definition
    aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN

    echo "‚úÖ Task definition re-registered successfully and updated in ECS service."
